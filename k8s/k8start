#!/bin/bash -
#Installing application on k8s cluster
if [ $# -eq 1 ]
then
    echo "Trying to build application for $1 environment"
    case "$1" in
        "dev"|"prod")
	    #Getting k8s config
	    pushd ../terraform
    	    echo "$(terraform output -raw kube_config)" > ../k8s/azurek8s
	    AZF_SECRET=$(terraform output -raw storage_account_secret)
	    AZF_ACCOUNT=$(terraform output -raw storage_account_name)
	    #Getting DB credentials
	    export $(terraform output -raw credentials | xargs)
	    popd
	    export KUBECONFIG=./azurek8s
	    echo "Creating $1 namespace"
            namespacePresent=$(kubectl get namespace | grep $1 | wc -l)
	        if [ $namespacePresent -eq 0 ]
	        then
	            kubectl create namespace $1
	        fi
            if [ $1 = "dev" ]
            then
		    echo "Using cloud volumes in $1 environment"
		    echo "Creating k8s secret"
		    kubectl create secret generic azure-secret --from-literal=azurestorageaccountname=$AZF_ACCOUNT --from-literal=azurestorageaccountkey=$AZF_SECRET -n $1 --dry-run=client -o yaml | kubectl apply -f -
	    fi;
	    echo "Creating public configMap"
	    kubectl create configmap app-public --from-literal=ENV_TYPE=$1 --from-literal=DB_HOST=$DB_HOST --from-literal=DB_NAME=$DB_NAME -n $1 --dry-run=client -o yaml | kubectl apply -f -
	    echo "Creating application secret"
	    kubectl create secret generic app-secret --from-literal=DB_USERNAME=$DB_USERNAME --from-literal=DB_PASSWORD=$DB_PASSWORD -n $1 --dry-run=client -o yaml | kubectl apply -f -
	    AZF_SECRET=""
	    AZF_ACCOUNT=""
	    DB_HOST=""
	    DB_NAME=""
	    DB_USERNAME=""
	    DB_PASSWORD=""
	    #Getting build number
	    export BUILDNUMBER=$(cat ../.buildnumber)
	    echo "Got build number $BUILDNUMBER"
	    #Getting ingress external IP and converting it to hostname for current stage
	    export EXT_NAME="$1.$(kubectl -n kube-system get svc addon-http-application-routing-nginx-ingress --output jsonpath='{.status.loadBalancer.ingress[0].ip}').nip.io"
	    echo "Got env url $EXT_NAME"
	    #Setting ingress hostname
	    envsubst < manifests/ingress-tmp.yaml > manifests/ingress.yaml
	    #Setting build number
	    envsubst < manifests.$1/kustomization-tmp.yaml > manifests.$1/kustomization.yaml
	    echo "Setting up application"
	    kubectl apply -k manifests.$1/
	    rm manifests/ingress.yaml
	    rm manifests.$1/kustomization.yaml
	    echo "Current namespaces:"
	    kubectl get all -n $1
	    echo "============================================================"
	    echo "Use link http://$EXT_NAME to access web application"
	    echo "============================================================"
            ;;
        *)
            echo "Wrong parameter '$1'"
        echo "Usage: k8start 'build-type'"
        echo "where build-type = dev or prod"
            ;;
    esac
else
        echo "Usage: k8start 'build-type'"
        echo "where build-type = dev or prod"
fi;

